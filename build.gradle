import java.time.Duration

plugins {
    id 'java'
}

group 'org.example.multipleprojects'
version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}

def actionsMap = new HashMap()
actionsMap.put("action", {
    println "This is an action"
})

task(actionsMap, "taskTutorial") {

    println("这是最简单的task")

    doFirst {
        println("taskTutorial doFirst")
    }

    doLast {
        println("taskTutorial doLast")
    }
}

taskTutorial.doFirst {
    println("taskTutorial doFirst firstly")
}

taskTutorial.doLast {
    println("taskTutorial doLast lastly")
}


task "A" {
    doLast {
        println("Task A")
    }
}

task "B" {
    doLast {
        println("Task B")
    }
}

task C {
    dependsOn = ["A", "B"]
    doLast {
        println("Task C")
    }
}
C.dependsOn = ["A", "B"]

task D(type: Delete) {
    doFirst {
        println("doFirst Task D")
    }
    delete "./app2/src/main/java/test.kt"
    println("delete ./app2/src/main/java/test.kt")

    doLast {
        println("doLast Task D")
    }
}

4.times {
    tasks.register("task$it") {
        doLast {
            println "I am task number $it"
        }
    }
}

task1.enabled = false

tasks.named("task0") {
    dependsOn("task1", "task2")
}

task ATest() {
    doLast {
        Thread.sleep(1000)
        println "current task ATest has been executed"
    }
}

task BTest() {
    doLast {
        println "current task BTest has been executed"
    }
}

defaultTasks "ATest", "BTest"

File testFile = file("test.txt")
testFile.createNewFile()

FileCollection fileCollection = files("test/test1.txt", "test/test2.txt", "test/test3.txt", "test/test4.txt")
fileCollection.forEach {
    it.createNewFile()
}
/**
class GreetingPlugin implements Plugin<Project> {

    @Override
    void apply(Project project) {
        project.task("helloPlugin") {
            doLast {
                println "Hello from the GreetingPlugin"
            }
        }
    }

}

apply plugin: GreetingPlugin
 **/

abstract class GreetingPluginExtension {
    abstract Property<String> getMessage()

    GreetingPluginExtension() {
        message.convention('Hello from GreetingPlugin')
    }
}

class GreetingPlugin implements Plugin<Project> {
    void apply(Project project) {
        // Add the 'greeting' extension object
        def extension = project.extensions.create('greeting', GreetingPluginExtension)
        // Add a task that uses configuration from the extension object
        project.task('hello') {
            doLast {
                println extension.message.get()
            }
        }
    }
}

apply plugin: GreetingPlugin

greeting.message = 'Hi from Gradle'

